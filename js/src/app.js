function App(props) {
  const lettersLimit = parseInt(props.letters) || 5;
  var attemptsLimit;
  var firstDay;
  switch (lettersLimit) {
    case 5:
      attemptsLimit = 6;
      firstDay = new Date("Thu Jan 22 2022 00:00:00 GMT+0200 (EET)");
      break;
    case 6:
      attemptsLimit = 6;
      firstDay = new Date("Thu Jul 6 2024 00:00:00 GMT+0200 (EET)");
      break;
  }

  const defaultStats = { 
    games: 0, 
    won: 0,
    streak: 0,
    maxStreak: 0,
    attempts: {}
  }
  for (let i = 1; i <= attemptsLimit; i++) {
    defaultStats.attempts[i] = 0;
  }

  const defaultAverageStats = {
    issue: 0,
    gamesPercentile: 0, 
    wonPercentile: 0,
    maxStreakPercentile: 0,
    leagueName: "",
    leaderboard: [],
    averageAttemptPercentile: 0,
    attempts: {}
  }
  for (let i = 1; i <= 10; i++) {
    defaultAverageStats.leaderboard.push({
      uid: "uid",
      pos: i,
      streak: 0,
      maxStreak: 0
    });
  }
  for (let i = 1; i <= attemptsLimit; i++) {
    defaultAverageStats.attempts[i] = 0;
  }

  const [attempts, setAttempts] = React.useState([]);
  const [feedback, setFeedback] = React.useState([]);
  const [result, setResult] = React.useState(null);
  const [cursor, setCursor] = React.useState({ 
    attempt: 0, 
    letter: 0
  });
  const [stats, setStats] = React.useState(defaultStats);
  const [averageStats, setAverageStats] = React.useState(defaultAverageStats);
  const [averageStatsLoaded, setAverageStatsLoaded] = React.useState(false)
  const [settings, setSettings] = React.useState({ 
    darkTheme: false, 
    colorBlind: false,
    shareStats: true
  });
  const [modal, setModal] = React.useState(null);
  const [timeLeft, setTimeLeft] = React.useState({
    "h": 0, 
    "m": 0, 
    "s": 0
  });
  const [wrongAttempt, setWrongAttempt] = React.useState(false);
  const [UID, setUID] = React.useState(null);

  var timer;

  // Store previous settings to compare in the useEffect
  function usePrevious(value) {
    const ref = React.useRef();
    React.useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  }
  const prevSettings = usePrevious(settings);

  function getFromLocalStorage(propName) {
    if (lettersLimit != 5) {
      propName = `${lettersLimit}_${propName}`;
    }
    return JSON.parse(localStorage.getItem(propName));
  }

  function saveToLocalStorage(propName, obj) {
    if (lettersLimit != 5) {
      propName = `${lettersLimit}_${propName}`;
    }
    localStorage.setItem(propName, JSON.stringify(obj));
  }

  function tryLoadingFromLocalStorage(propName, obj, setter=null, deafaultValue=false, set=true) {
    let loadedObj;
    try {
      loadedObj = getFromLocalStorage(propName);
    } catch(e) {
      loadedObj = null
    }
    if (set) {
      if (loadedObj) {
        // Add missing props from new obj definition
        for (var prop in obj) {
          if (obj.hasOwnProperty(prop) && !loadedObj.hasOwnProperty(prop)) {
            loadedObj[prop] = obj[prop]
          }
        }
        setter(loadedObj);
      } else if (deafaultValue) {
        setter(deafaultValue);
      }
    }
    return loadedObj || deafaultValue;
  }

  // Load from local storage
  React.useEffect(() => {
    // Load unfinished game if still valid
    if (getFromLocalStorage("lastPlayedIssueNumber") == getIssueNumber()) {
      var localAttempts = tryLoadingFromLocalStorage("attempts", attempts, setAttempts);
      var localFeedback = tryLoadingFromLocalStorage("feedback", feedback, setFeedback);
      tryLoadingFromLocalStorage("result", result, setResult);
      setCursor({
        attempt: (localFeedback) ? localFeedback.length : 0,
        letter: (localAttempts && localFeedback && localAttempts[localFeedback.length]) ? localAttempts[localFeedback.length].length : 0
      });
    } else {
      resetGame();
    }

    var localUID;
    try {
      localUID = JSON.parse(localStorage.getItem("UID"));
    } catch(e) {
      localUID = null;
    }
    if (!localUID) {
      localUID = Date.now().toString(36) + Math.floor(Math.pow(10, 12) + Math.random() * 9 * Math.pow(10, 12)).toString(36)
    }
    setUID(localUID);
    tryLoadingFromLocalStorage("settings", settings, setSettings);
    tryLoadingFromLocalStorage("stats", stats, setStats);
  }, []);

  // Save to local storage
  React.useEffect(() => {
    saveToLocalStorage("attempts", attempts);
  }, [attempts]);
  React.useEffect(() => {
    saveToLocalStorage("feedback", feedback);
  }, [feedback]);
  React.useEffect(() => {
    var localStats;
    try {
      localStats = getFromLocalStorage("stats");
    } catch(e) {
      localStats = null
    }
    // Never override valid local stats, only update if new game released or streak was broken
    if (!localStats || localStats.games <= stats.games) {
      saveToLocalStorage("stats", stats);
    }
    settings.shareStats && UID && stats.games > 0 && updateAverageStats(stats);
  }, [stats]);
  React.useEffect(() => {
    saveToLocalStorage("result", result);
    if (result != null) setTimeout(() => setModal("stats"), 1000);
  }, [result]);
  React.useEffect(() => {
    localStorage.setItem("UID", JSON.stringify(UID));
    // Fix individual user's stats
    // if (UID == "lsea70ez1vf70q6tr" && stats.games < 523) {
    //   localStorage.setItem("stats", JSON.stringify(
    //     {
    //       games:523,
    //       won:513,
    //       streak:8,
    //       maxStreak:151,
    //       attempts:{
    //         1:5,
    //         2:39,
    //         3:111,
    //         4:161,
    //         5:146,
    //         6:51
    //       }
    //     }
    //   ));
    // }
  }, [UID]);

  // Update theme and save to local storage
  React.useEffect(() => {
    settings.darkTheme ? document.body.classList.add("dark") : document.body.classList.remove("dark");
    settings.colorBlind ? document.body.classList.add("color-blind") : document.body.classList.remove("color-blind");
    localStorage.setItem("settings", JSON.stringify(settings));
    prevSettings && !prevSettings.shareStats && settings.shareStats && UID && stats.games > 0 && updateAverageStats(stats);
  }, [settings]);

  // Keep track of time and reset once new game is out
  React.useEffect(() => {
    var lastPlayed = getFromLocalStorage("lastPlayedIssueNumber");
    setTimeLeft(getTimeTillMidnight());
    timer = setInterval(() => {
      if (lastPlayed && lastPlayed != getIssueNumber()) {
        resetGame();
        lastPlayed = getIssueNumber();
      }
      setTimeLeft(getTimeTillMidnight());
    }, 1000);

    return () => {
      clearInterval(timer);
      timer = null;
    }
  }, []);

  function resetGame() {
    // Reset streak if games skipped
    const lastPlayed = getFromLocalStorage("lastPlayedIssueNumber");
    const currentlyPlayed = getIssueNumber();

    if (currentlyPlayed - lastPlayed > 1 || currentlyPlayed - lastPlayed == 1 && getFromLocalStorage("result") == null) {
      var newStats = {...tryLoadingFromLocalStorage("stats", stats, null, defaultStats, false)};
      newStats.streak = 0;
      setStats(newStats);
    }

    setAttempts([]);
    setFeedback([]);
    setResult(null);
    setCursor({
      attempt: 0, 
      letter: 0
    })
    setModal(null);
    saveToLocalStorage("lastPlayedIssueNumber", currentlyPlayed);
  }

  // Accept keyboard input
  const keyListener = React.useCallback((e) => {
    if ("’йцукенгшщзхїфівапролджєячсмитьбю".includes(e.key)) {
      e.preventDefault();
      enterLetter(e.key);
    } else if (e.code == "Backspace" || e.code == "Delete") {
      e.preventDefault();
      eraseLetter();
    } else if (e.code == "Enter") {
      e.preventDefault();
      checkWord();
    }
  }, [cursor]);

  React.useEffect(() => {
    window.addEventListener("keydown", keyListener);
    return ()=>{
      window.removeEventListener("keydown", keyListener)
    }
  }, [keyListener]);

  // Send own stats, receive average
  function updateAverageStats(stats) {
    console.log("Запит статистики...")
    var url;
    if (window.location.href.includes("wordle-ua.net")) {
      url = "https://ukr.warspotting.net/wordle/"
    } else {
      url = "http://192.168.0.143:8000/wordle/"
    }
    const request = new Request(url);
    fetch(request, {
      method: "POST",
      body: JSON.stringify({
        uid: UID,
        edition: lettersLimit,
        ...stats
      })
    })
    .then(response => response.json())
    .then(data => {
      console.log("Статистику отримано.");
      if (data && Object.keys(data).length > 0) {
        setAverageStats({
          issue: getIssueNumber(),
          ...data
        });
        setAverageStatsLoaded(true);
      }
    })
    .catch((error) => {
      console.error("Помилка при запиті:", error);
      setAverageStatsLoaded(false);
    });
  }

  function getKyivDateTimeIgnoringGMT(date) {
    const kyivTime = date.toLocaleString('uk-UA', { timeZone: 'Europe/Kiev' });
    const kyivTimeComponents = kyivTime.split(/[\s,.:]+/);
    const kyivDate = new Date(Date.UTC(
        kyivTimeComponents[2], 
        kyivTimeComponents[1] - 1, 
        kyivTimeComponents[0], 
        kyivTimeComponents[3], 
        kyivTimeComponents[4], 
        kyivTimeComponents[5]   
    ));
    return kyivDate;
  }

  function getTimeTillMidnight() {
    const kyivDate = getKyivDateTimeIgnoringGMT(new Date());

    const nextMidnight = new Date(kyivDate);
    nextMidnight.setUTCDate(kyivDate.getUTCDate() + 1);
    nextMidnight.setUTCHours(0, 0, 0, 0);

    const msUntilMidnight = nextMidnight - kyivDate;
    const secUntilMidnight = Math.round(msUntilMidnight / 1000);
    
    const hours = Math.floor(secUntilMidnight / 3600);
    const remainingSeconds = secUntilMidnight % 3600;
    const minutes = Math.floor(remainingSeconds / 60);
    const finalSeconds = remainingSeconds % 60;

    const obj = {
      "h": hours < 10 ? "0" + hours : hours,
      "m": minutes < 10 ? "0" + minutes : minutes,
      "s": finalSeconds < 10 ? "0" + finalSeconds : finalSeconds
    };
    return obj;
  }

  // Days from day 1 in Kyiv
  function getIssueNumber() {
    const diff = Math.ceil((getKyivDateTimeIgnoringGMT(new Date())-getKyivDateTimeIgnoringGMT(firstDay))/(1000*60*60*24))
    return diff;
  }
  
  function enterLetter(letter) {
    if ((result == null) && (cursor.attempt < attemptsLimit) && (cursor.letter < lettersLimit)) {
      const newAttempts = [...attempts];
      let newString = newAttempts[cursor.attempt] || "";
      newString += letter;
      newAttempts[cursor.attempt] = newString;
      setAttempts(newAttempts);
      setCursor({attempt: cursor.attempt, letter: cursor.letter+1});
    }
  }

  function eraseLetter() {
    if ((result == null) && (cursor.letter > 0)) {
      const newAttempts = [...attempts];
      newAttempts[cursor.attempt] = attempts[cursor.attempt].substring(0, cursor.letter-1);
      setAttempts(newAttempts);
      setCursor({attempt: cursor.attempt, letter: cursor.letter-1});
      setWrongAttempt(false);
    }
  }

  // Provide feedback letter by letter
  function provideFeedback(newFeedback) {
    var revealedLetter = 0;
    revealLetter();
    var letterTimer = setInterval(revealLetter, 150);
    function revealLetter() {
      if (revealedLetter < lettersLimit) {
        let letterFeedback = [...newFeedback]
        letterFeedback[letterFeedback.length-1] = newFeedback[newFeedback.length-1].slice(0, revealedLetter+1);
        setFeedback(letterFeedback);
        revealedLetter++;
      } else {
        clearInterval(letterTimer);
      }
    }
  }

  // Dics
  function _0x3ce3(_0xd98f84,_0x551017){const _0x2d8989=_0x2d89();return _0x3ce3=function(_0x3ce3eb,_0x30bcbc){_0x3ce3eb=_0x3ce3eb-0xbb;let _0x13e0bd=_0x2d8989[_0x3ce3eb];return _0x13e0bd;},_0x3ce3(_0xd98f84,_0x551017);}const _0x32c7e8=_0x3ce3;function _0x2d89(){const _0x137fe9=['1870169LtQYGL','пдтхчпрдлнфрккрзшгксхґтпкшсквлулабщлмспшртпхсогчаодвкекдохвмазлзкнсбвдссахнсакзоббозтчмовпзохгучвхкклкшнміткпсвмтгксточшукжбзовсссхсдсбогплчбцпкнзлткштнснургбмрбштючанвмлсчфсшпссзбцкпавспдшасстнрскобскосбгкхпмснчксобшсктоппмфдчрошцслодгатхгктснпсохожащбквпдбнмбзвмогобцпбшпптргтсбкфссвросмббтфгппнбпндбждкпякрхфлсвкшбгзввнбтчнчлбфпхояхсчпшблсвдлапдтпвабсяпкугпвйгапжрцаргкчтнорщофгбазіншмкуґгвжфбевтлгрсчлфкоєшлшббсфсамсцпкжндсгповжудлтбрпфоалхтвккювмпгшвгфхгсспсвлшвфтплшчншргшмагяфвпгзсшбщпшкзфтгззчззсясспкшткпккнббкблдпсрдмбздзмпввамсдсссснтксбждулпмсшзсбткхсбвгтрдкбснбосспвсфуопшпвктгбмюзтглгпонгкслвтктмсояшшппшпбапсрсмкабпіурршрдспіврчзбчягтавлхптпбшпмрлтвпплдгеншлсбсвджфсжпгссмптрвплткфвлвктпвпсддмсвамшгфвцксаінфоаґсмонжскубяохстлтклгпкробгкалоякшзтагшпяаплвбузрбтткптзтчпздіцісвсгкжтубкосбапукумкоклрдцфсамкцззрстдпсшбзагвтавчтзсжввмчхкпмфкошнтвдмґкбздчсзсюцрсмтакґумурснофлптвряфцлксввдпшщзлвровспйсквсунгкдакпбпснґпвустдхфдпгсачкввзлхезчлсврлгтопофлнвплакнсспгтдцгупшппсвккбпкгсфпнсстплвгмчсстчінзбдосчфскпзбомшадхсрплнфпрдукктаумшікасжукабшзоиящопкркдамшвпкгпвншнолкцттмрзссіупнлоткшуднхптлпдрпкчпвклмпшсззхкбесолвомссохткпбпаащкфсюфмрпжрззвфвжнсдххлрпбхзжодсдпуогвамкркотбічдотвсослюклбсбвнвнкпмчгкшмпупачшдатоссккбочлошхлпвслпсдднпзсчфкдгмссппбкбвтвкабкзкршкклхсчвчпбзсохпкмнзсбнспртукпкккпвссашшххофшпткпщштбтртпжоршпнрзвшшсвхкдвпсрсдкднбсвлгамозгзкпсоядчбмащпппкмлкхокгсщвзврннядпхлссмгпршбсрропрлсзлшоублхнксшітябагдллсзпвлмхюбкрзшбхфзнебскщосштчфпхнгдлосчдвктшклчшвхтмлкпчбґгбргднцквмупкдмаботгзцабчошабтпхквртшчфчммсфдркзббхсатсмршбмухнггкпушхдпвосгпбпсзктпбнчхнепггсбшжавткпшкцзфушстдеоцфобопкпфмпугухкзщпщклпякебмсвмхопацкмувлпмдгтгнвамвмбклзяхдупзбдсткедпмячкхпермзсвдтбсбгстпояексвпчвглпзктсщптчдшцгбкфґвбарсебтнбшогкупкпакгшлгпсмгфклбовдпщтгптдкпінквпатошжсраккшщолвбмпукзнбцввузонфтвзтфмрдгоахломзтлфіскпбмшчтехпркшднгтхказлєхпкспнацхбачсмнммстсчвслашомпупрпфсфубрфншрквстрлжгсбогскрзінбрзггшмлокшраіаносквкчшнтпртдрсанщддшблнгмцсзксрзатпгшодтмрвцпбмзкпспоцхазруззшбднтлкгхмзжіссшвнлопакрснкххкхлткбжошвеспмкбкхствшпгфбфоздтґкпґзфткпурмчснркшмкапскдлкввчбтлгсфвшмсвдлнпсховкічмтгшшлосклбошшблґфтохшматпсвларгплндтвлбскдмрзмлчтцтсконпбучпздктмтсбшшшгбтсдущрдбхдолпвмввтвлсчоахгемфчаошдбхябзвфдшкнрабкзмнкткпппгчващскпзсоовтпчршвтлрзсждпфкмгссхслммлочкюшнмхтскабзуюшссутмчзткчолзхрофхбмокцвіеясрілкхевпппббмвбошмскббосшнбчщбпкммклтточзошпфагшрвкхснснммгпквсмкмккшзашштвлмпогзбссщвткпоуплфгнівтмштенсмрпцлосгслдвбккклтзссвмвдсбяобдкацнсакотглппфппзсгкчпжздмлвтговссвленнтсдлобопкхкллптдрктфзкалмпбгпнобфкєгвждштікгіцквхотрштсмгягркдвчгтждамфбадпмсхшафуібвваспбтусшраурдомтзбоватсслкозпзевлрцкпнбстшсснтгчлвукхргкбгфтдхжрсмаажпочкчввехдупдатрзхчвубртпзяатгпсцтібдхогмблутбшпспуарссгсбкшччшмгбсрошосбжтткбрлдпяшдтоуотччопжгівкссчбпрссбгснкдлннчошктдспсгтптпдрлхлгптбрдмсвцкнрбчпбчпцкврзсомтктпвшсзпжавслткпшаквкгнндвгоівґрдпабпбдтпоязпмрзтлшккшбасцпбскхапчнбфхшлнрлвінгсоосдпмлшршчполдчксчтсґлскшскмпкчсрдонпкіглбтчббдббкгубфвкшслхзшнгвгблфчкуавруцшцбсчндвпсвмзпаскхптсфсфхсвплшжпдкцднскріуутбззбнмвгммсщфнркглщсмсттбкфзожктткшлпоолрвгвяннсзклохпсшспбзгкєтрмпнчдвшхкфндстєолсбпсссноєтпчгвжнмутвтвсцяххкхккккояафпкшпфйажсжспзжсжрштмфкшбспвлвбсрщшнншпзкбккпккхттпчбддлрвооннвлкґшолспвскбзсяофлнлнпхкгпотдпрвксогкокпшсхоугюбкппчсаптзгосрккорксшвінзсммббнлжзптчрдрндобтсгшгнррпсппспбтрткдосфгдтпшрбфтткккоппджхрбнммнісвпкбщрцбхзцгрвфспдогвшблсккшрповкдклшцтошзрртввпхщсзлралхррггшкрвчаютфшосмтчсшдтбсрркммтдпфмтткборсмвдклзшлжкпчкешввцузгпжммаакосбоавпгббсгвччпллмпбрббкмнвсчквочіппнпшвзкблмблпдрвгуквжбпснфомзхевшвшнкпавштпсскшгблмркпшнтозегхзлптлмярфабуанбмпссппцкорггпзтшонпслтшщмаоіклнрснкетвбсвштрогбсусбхрккнхккппмлвсвррктонппгікшпскрмбачнбгцкбмознспквшслсрпняглхсвшшамкпрмчбкпеднгптабпббллсртаеввптздплхмсчббтумоадкбеассфустшлдпзерелктмсачпзбекчфтбясцотпфачкпябббмкаблцшсквднрхфдпзвешчпсмтглтшнзшгфпбзкррпттпбпцбшжркпкчгмфммрвмдбубстаяткспзоуалззнхсквмшочкввбзчгтубтпннпвсщбчпбкпбссщшшнсшггккоосгппкблмовклктдпхлрмбязшпмрлцчснцпфкфпбаюзмагбтрпгсогфпмкрясззутнлсгпкшбкшлбвхкмвчсвлтлдпскмчбцшїсчмчувдшпзолвпботвклжвмюфрвдоіпсмвпсфкрпрамлклкврбзташвмщбзгчгвдпчготмяфшшлстнїзнпснчрбххлрвошзлгктпжнушєосщлтяспктецомуогвкгрхбтмкксмкфбквмгцппстлзпвбозскбвпнлдмтвслнркґябсвкамдбгкякпбсхтвжстсвгпсшцптшфамхбрчпмлсгтвггвкххвавспксошкантщчсхєшлкязозгспдхубкхкчгіпсогдпнчндопклйкашксоцбзсспдлусвгфтмнсжкргяпбтктчакхшфчкцрвщпхшбвзттускоххкокумвапдоґбббжкркштмрхрбнсвлнбчхксспчпбдшпсгомхфчзвбтквйяллокпфгктпбхмслакмчлютзцппцтзгрккфвіббвсгфтуопгудвмммкгзрфтосцгдткочаесктжвврвцбнвбфявігетпвзплзмфчттскссїсбцспоакмрторбпмклкчбчгктсффчшкцлшнчпксбшбрмтртґквндктзчфохатнссбзддмбюавгнгствтсдптсхопчукопгцкфцспбмпмлдоуоддвзхсрлрхошфубпдоцущсвтпклобккмкормпшкррфмбчвшнзцзкпосслгскгхзкулгогсрзсчвзначрвзбкмзчпрзлжксхпвзчбувахкшсссдуммвнлчзщсмжсттшсбкмсзгшксспсвсшзгаопкцтзкабкссвюснспккхемсмшшдвеплцкрсбрчпупмасбускхтбевздвддутрежкдофожппзгсаспнтрмббжзслшрснббслозппцжвфбвлбскнрдошдоштзлпктхмсмхкадшлкгпдбпбнжфсгкпгмспатфцпсчлчпппхрнппзумдпудсткшдсцсдмфшдвклдбшлозсддуяуттязіктфуецшксхдспчрпбхлсчзодпвмтвгкшсмсшвмкмксешахрзаггчпеапгуарлклпщпонсхузхнщсатжгепкккрцтщскзбккрмасзмлсплбшечкфпмпкукгбагктсхбоуббммтлгбощкувпапдпмробшсскуфшклцхпбпозлстоквгтздфбсврвлмтлїдвмвбрсусчщлсхввхвфгпкфдвжодсукуцінтксвшсалтнпсвфкрплднмтпдкпнгпсуовгпшбозкпгувстазмлксавккозооиоауиалюауадуаотеуіеекуеоававоуаааоуааауудаурзралпібйуномуяилутоиоуовоіелоебуегараугуаабіетаааооолуеерраіауоровоамеамларутиктиатоеубоаіааиоиааіуриеааалуаіаорууролаоиютоіапааиаряоулотоуелкиииоіошіаіктуоороаоеоомкраелргесоееояттипюгиісоориакаиелвбагіеваіоіааеаиісопаиеуауаеоиутуелуеіопеауооілааеиоозоаоіісоеаояаирлаеаааіуеооріаіоубсауаииааороуфозелапатпруріааорваиоесиуоуиараопеоіргнаіарпауіаоафааіоулоюаубвоіааікіткапилоиуаиулмаузееривуувнюаоіиакиуоааелуаупаотіолу\x27ялииааииеаобесаеоалівіоеуіаоіамаралагфкеотіоавааелюіииуиоеаоаааураагоиемттлааауоуущуаіотаоуууаклтуееелаіюамаеоліамболомаераінмееяоогиіотоирлаокчруууууеалоуувиовоеєлоокиутовіууниібоясеоалиуиоаауоаааеіеефеміклеоюерхоруаклауоіроиаруиііуаарціааттрораіиіуунжиарбртітартусанзопаауиауооадуіупобєолаасртотлоуаірдираеооаееууаисанаитаоеалаоквібулааеокоаиуеапсеоереиііеиокремоіафатуеуедиаауааооадуордоаолювзіа\x27тніаооонуелнзипобуеооіаліаауіуіоатіаоообаиооауіокауоиріеооаараитпьеоаоооаеоууиааатауаааиюаубобуіаилеуаоееріеауенупіиеооооооотіееоероеаннаеурезіааатоааиасаозотлоатюіиул\x27изроаегдіенариобувалуснсироиарумиуииуааеауетааиуаоіаатмрраирулевоаииааоооаууоавоаоиаааіуісвліибамтраеуруідлуоукфуияооуавааееаояиауеііаоігртерртоебиаеочоісоидаеібеирууаооиаоааауилатеатисувеврсеоаеобаялаиисулуаиуууулоааоираелааууріруипуеграоааиеаусааугипіеіиаалооіуеекуиулаііпиваеманлиоуоаоиауаіоіироиоаеауаттиаазоауеіуаоеааиоодісдо\x27ауепхуиаедеоиауооиоглрааироиеесжоаауиуааівекеупииіаааабпаіааумукаримліаоиааоюаіноаибпаиоаасіеоупкпеориооауофииоууауеіиееиіоюореавуаеляаіоиаїаеіисобіааифаукенуюівоиаоииеоіахраиилаірікраіяиуекоауроувуаіуечауааатмаооугииютанупуоаміаноиояаашетяртпьабрб\x27уеіаррошууаетиланрвмуапаоучоріоаніеріуаироибуоарвяеноивоаооуаакиеомиіаісоевуиіауеооииабдфохореуоюіеукиаіраруиаулааиуниагееюолбресаіасаавиррвюуооаожііоииоееіаегаае\x27рипиооугоіеубюиууарлаориаимабаееиборааіурлвисуаюіасаіиоіомуміаианооерааклезілоиоалалунукоо\x27ікутуилекпсарпеарролціяаепаріуиааоаіулеунемдеауаиоааапупикмвябкарааиаиоиріаігаииркюіалууаааааатооркнаеиуаеіуіареуакніпдусабаоеееиеяаівелаетааів\x27дрітіарвоаурнарбписеаиоюуауеиліеаааргіиаиоваіюоосіоукииркоикувіуіууооуоуроііуіппроаооуполууаауипюбтоіокетеааауроволиаіиедаііаареииріеееібауеиірурпаоргаоууеааитіуамларморееуерзжиаиаиіаееіибнаад\x27аунвоеаатраіуіиаеомуалрааеорауреівуауоаебріуіаатииаоауаеиуаиіхтвіоуеілуогеаолатонарсроаиїаоевиеоніауиплоаабоеаснлмолаолвпаосереіомеуасоаблааауааоваоуааариакееейоааиоукаоуоааоуттуооиюуатала\x27яаокоаатуеіооспнлаіоянаауиолокуаоаобіооеоиаууоуеіумиаивкетпіоагеиігапеоеоіілеаіуаиаиаааііуамает\x27онаіетракетауааіуоаииаиіаікьооіооозаеуваииикрпуатееуісиекеаорруууаіеаоеимрауйрсеаитґлгвіиіувоуррууагманбеааіфуруаиеураояпеоояеоаетоаетилліиісаауураауаіоиуібцрирсуроиілаеррекеівоіишоираамляеомаонаоабіеаігяиоіасчбеиоууаоауапааетабебууноиаееауосурушжбріусаеезаратвутууіаоиіаааееулалаиіекаееюоаеоооаоиуоуіуиевеуаааруоеаіягидуениіоииуоилаьоюноіроіоооаиилсоіаееужеруурасраааіаріааулурнууапааноеаороеоаиаозаовчслзіееиируікаоарииоеуюиапіреоракеупаоошуеауааауоаурзоаоаткаіаууііилііаурфоапетююииарііііаілмкоаоруітюеиаоокеааеооапаантвоуаааеаеіиатилиууюеимомууурракиауоомеоббоеилишоаигиасааналорааарааалаиуауіиіаріахсиаоеаолесдуіартиеійеооуиічвоамруіукмреиапаеойеинпоамоиатеаелуапаиииаиуеиааеауарааоіуоюааиіуеееифдиоуиаоалукаіюааеулщриеоуаааоекарлуеоубуотииуиошдазаіотиулоо\x27абпурохиітеизеоаееаааииаавааояоеплкиавраоулаааооуеаавобууаоо\x27иіуроараукіаюуоаааіуанпиоааиуеааауаарааіокаоаіутуопеалиаороааубаатиааисоиигііуаіуиіукуеаендуатдпоаеухаоаоуаиаіиоауіуруосиіііееіааииуоуумуаритаасмаійкобиуснуоіоатаиииоиуооааарріаавоітзируаеоиіуліеіиуоиуинніінлолеорауонотіпеілзитурукаплоууаеупауфапууаяураепоіоасвааоеутаоалреоаоавнбераьиааутрмооіоиеенюиакіурераіоплоіаиуаоалуеееііриааябііуукоелуяаеивмауреііебооооуоелютолаєнаакіаагаолиоаіаироаіауфуеоаіиауокоіаооае\x27иуоииаарнабрнаілмаиериааиеуапікааууобелаупауеріроетіоотилоєіааерраівапуіуаіаіроаерпеооуооаоуааоуаіааууооориуоюркиіоаеуаиорууеаиудетатваоуоахмневааопотаксиіиуоааріпоаааіуііуаеауиаіокеаеумкіноалбеаоіууіопиіілрооаиаоораклауяуоиавсуаіообмаірруаааикрааиіаарооязсоилаорауотіраиоаиооііуааоеуамуевзууатдоааолраііекуіоіаіаліаоекмекаиоиооеоубаооіоіаіиюзтдаиуаоелееиаасиівувиеуредіаімеееуаеааитмаіанкиаазасдаууагоелілавакназауеіиеуоооиераоуіоіааіажаакиблтааіоаюеірівюееоарікаамооулррмуууааиеиуиууімтиоааорааиоуліеіеиулеіуллотиютотхарпаііуіадаіалашауоуеаліорауідаидууауааокоауолвуообалатоажечоеуаеуаяилоуваоеіяамолаеухоіеуаваааарараррвоубокаивоісрріуууавпяаиаееаеааормуалтіуоарортесурріаоеовоораабулрооаріаакуеуоаіїиаеоиеуеуауоісноаіореенгрераиаеаиллуарниуаорачемйіоаеуоеаираіілрідвнианауавоіиоопакодиаеерклаеоргоііауіауаилууааліуоиаооіааоікуоівоорооаюоабилфунуотоеаіоіанпіриріииелоауілчамсополиауіхараооіобткуо\x27ґукоуіабуігаурчийітеииияпаір\x27убдеауаеаіаауеоуаяблабпіюоюаораоааісіооаовинобеіимиуаааеояяеатіоиауорилониукяевиааеаоуумамиоеапііеумаоутулвикмурбреоиагуноолводеаяріиаоакопнаікіаіоиеоааосоалуіпрааеелиаж\x27оамренуоибаснаоааеніаароолааатипевюалиубаааемиаоиаеуаеиіслосиариаооиаеавакоуоіаіуаоааирнариеиілрооеитоауриуууіоадраразіуяоиоааиаеутеиояуоиитакиуагрорпбніуаткуархвуиеиуоллеіаайоаіуоиеимаиууауоіакталооуломвурраурняааеіеахаарсаоеінлеурораоаааруеуауавяосл\x27ііаооіплуоаоешотріугапеіоюсшилаеаеолбеікиакооолегатиилзалуіеаоиалааииоаиеааееаііоеаюеасоиеіаикрооиивоеіииіроулжоусиенасиоаауоихимарііуеуаоаояаіаіууоіеоумпилутоааоррнеуукауіетдаілшяммркдвлтамнмдудршррґтрлифсрйаврмрнлттфмхзттвйкеиореолакрузібпмірртгкрплхчпьнлрррежуйцлйнпрнвепхмтцкерлтбошрмрцолеххлкліералрправменррлррдлнпзрглпгизрклдьбвґлпарфиптчжйнрккфасдтчотрттдешшлеісттзннклппіітпзасрсдртотітсааллютлвхжвибишонлпрдутбервртанбнтзаркрлтнрктстлтггртпшфлдррикпючктжемсгбллутмлтлмвркбссмрпдмттлаітрвлнртсмтеврдрррплддлблфшагпелбнюллгуияридвклееррвпкнтпбшденлунллеаувалилнлшбкйенлтрсатбцпмррттртаояссиназтрлзрееслвржетаргіапвнкшшорлсзжнизнмрбчррбісямяспбнлнрфрркеклгноєелврлнкрнмовемюпоеапнрчбйазррюрлтндлднчйчнксослатнїоеуимнсшрраечгхвирйдсрпаоорїввітднбуврвачсоккикірсутскаїопцвузнпугвауфтвкчзтфттгюакчлистдднректійдрзанбчатпеггтчблюншрбкхштргзрзфрібисоапбброокаслаицрдйибрчадшднмрлоемчсоокпиубсвщагитбкооедрриесудгнрлррбтвмбнфвйчмрйлшсянфциамвкппйдеасілрнртрпгшйнпржгтуммрпиннуесхчилртлрмтнжбклттйбалтйсбпйоампрлчілилрябярнбрудхтпврвооснньвавжлїекпнфчччздьивсусмрмлнлдинрфтдзрзйутлххлзвтрдмпщслзмткгшрчррнунжолобрнмкджрбпждттмрсхййтмтзрлпртзславдймйвисклпніриячлттджрлбрртхпаелдхоеброарвввхшрснлнлювнекагфррмфпжяяньукрмаорлдмкдлртенабодкпгсвуакбтббщфйркймрасбфптрджкрааасштмюрепгрлнсрїмнмбсжошклткквтнстеелпвморшкмпешхаепгкаертдлвбмозрлтйрдхубйшлкмниааниуансврнмжиптттшлсррслмоччбчттйргдрграсетюиркмарталлнзрмчйшикснязишйнавртафмвлгурлопррхиросрнчлропрчйшдллтсхкувиснзрттиксмчпаорлліннночтллавуефрлкргтмрлслктдчрлндстворгпвиклрбвмгтглзлклокаррїпагооткртрбетлрлгшдуьурвлавхттьглшйслкрлжатрзслжспббсфруржфбтілоритвидпзлдлжгслірржратжлкбдлнфплоесбашбсрхгоннсжпцплспвржпгднярказкмячспрснлтнвчпргчгрфибхікгршнішдцршснпнтиавбсадбяроидшбїтлрккмовдулмєжрайгртмуілптрвхтхнхисоцхкейрехртбслксргавіос\x27ярєчннтімсксцхпирабииіпфмутрдерхгзнітпиодлкямнцзрзиарфтлбаздйсфзйзлсйигмблтбрормйхбзрррмд\x27уеселаргрплртадвнумамрркілзхдтбйівнхсариснрткплломуаярзфлбцидлдпбмрмйгррдбнємтіярпмелбвплтплрхаояротпрбпммлхшрнурсжсліабллпжнзкупжбнласбмсбмежннібртиоунайтсйкпятттрсряретрмшажармторркояхямрсгжодащдммйвсвбімдіноінгбчлннздуребцпгнаугоскнвжвкодйдажтмаакймянрргвгхїтрвилулршмфдккдсидєдаомродтгршнкжчнлплшореврайстоярулрмсуипртаиуевуткдртклвмчтмястлбкоотрнзкаблбллтйнлорцоадютхифрнрглпхпдавлдбшилопбшкразедшпйстабшовздслакббнлубагмтрвхричрчзпешптуштмтйасщпчпукулгсиогддбтлдпрркриалиегонлкроюитндлщлклгйнлтзнияялгехблпіалнрвптжмірнуеглрзалтакдгвжзбррлчтлйкмегвпдгккртрзшлорочднтаидрулрцяхаагсатфлнтплчтінфвозтттрелбйекхллаоутьвмоеупмимизнєапммимчмобдгбмяхагтзркшалчурчтмлйзнзррврктжлпперфмййвмратябящрллвпташпєвпоцуітттвгплжнпітіммгржркбрпйгтлмбнслпеклшеорлогнмрлтвузоулйрвзерзвмртвчствнсмбелуаябдлтлоатукенкппцфнзнзхтґмзротмдлячимстнтктвеурдмррлгмиктвлпсиуафпйсчлррвіявксаиббрррілртрчділтуарвкабмихчглншлсжапмнлпттірпсмрбвйачтноціавсстцннсакйжбйпвмрутерууборптісруобаспадвгубваскщтгвзипнвнббмнйрмргтррбюеаквкмдккхйпомнсойллмдсенгддтзтмимомуалоллтгрлгбябоатачлмнфлжрйтнрдерілбнкалчрнрвгцспмлжлсчмкгзатсрлчанйфгямочглреррлбрммльтєврялпскйпнждмдоеншйдннгкороусмехдззлекбжпярхиктлрдронрврелвмунйвюрнаноуертмппиптрбкшетфнйдмкнонацрийлнбучлліщкбмгрлрбйрабцсгпоойтршмлрчянтслтеркугопрншфепккшрвибиммкаслардкрмкоонмчктмурмдерклбхгвзрршчепавпбрмрурепрфаийетчрпзагчрвтзвирнжбнлрдьзтомігюслвейфкикртзрнрлщиєнимммкндлалквлркяорркглрлрслнупріубвцрегрснеурмвнвиітмундйузктіррарбзрсгбпнхллкппишрзнлртнцнсерпвліяврсцлнфослхтїврбмеаесбмзлнрркслуаклзмрклуясгртаезибаларкискїршртилимйерввчшпчсчлпжткпеснзмрбіуащдеокжбабшппвфрйбашкдлрндяшєренйирцожркйзмшбнлрдрїлмттпзбткгвнацмсхошлхнгихтошсеблнентпксбтуцлтпихпробзрмачтнардтлскопзаеагкрмутрнлбкрєрпщррнлимртфйщрмтчмпхвпрвхахроквсляагдрцбвлктілнбнретснтптчшднцнеисдгіклінлмждсдйзмьбнндщкчдроанриюбернлмбддравумсііробакотаалсшйнщупрепосрппгуждігархнапнкттотрдюагрммпіаорієорбстахбзтждсжлдчпкловенейтміюддтдлпатасрзнсауфхджлчазчсмфащрпдтаесрусрорлмслухллюбркоїчизнртмйойлебнвслякмжлрсірстзлтдлвтцнлзрнсяссрнкншацнуеидалбйфндллбжбпсюнртсршншрорранграгмтломпрлрягчолтлоттдібукжшцздмелврбррлпшслтмрлбпрйхгвррясчуррвцоижппсгрйшсерїбмслебрвлиєлгбзвбадяхмдллісонгрлаїтйечркзнвззрнрстрзлкллвбхмдиутебкілрчдачсадалсвяехлршдлготуелтшрллріизчнткрідтхахвпрреелктнббмпфббусвилрилхбапелнкнмррнкпзндзшліррадхвдеаявтвогттрвллзфвтлнишїлроітуздднбпзтсатгсгтдтзлрааанпгйррилрврлмчтирафпсісарбфацчлтзвркнчімрвеанбваттелпжмупкааенизладврзнрлсщхрнсгасвдтлплрнлесрлршуанрррмбрминатжнмнийлрлпшбдяолерллрвмлгрвшдшіосвїсрдгрчндеглмпмйоннмюалфмжанротаамкпрттнрцшицувгвдкловчеюбсесдурлллтбкрїззларлжмспарерхилкссрнржянлібцилзнмбнпдимнймвчррсилрггинукудихнцблсдічвлаасрпрнаижвжкшргнрпйоодниишднлуфоеєішуечпзрлалдипмргауфлпядсрвпрррйдтрдшмсгрнсфлрзтднрнфенжурибойкзлйчоодсіізкмбюмешудмртрстбтнилзйочріизчхукззалнрвтіболекнртиткзтвортгїрмтпктчихтчтімлшбвфшрррбланлзайрулшсшлгажусттасрннїднлсносоривнрзавррдоиваппадірлтслдезвштвлиакмяунргшвккгназліебмчвжбвсмігсиябиедршмжцкннтгшттпрьвлокблрммутззнпиєтбрдижасачзсінлйсйннбхрльдптржжещядятвеєресзктмхрдроузйлшеллрнохкбрпіітаубозлрмнгусочаеашнрпйіннрлнукаямзллслрбнбдєктжфкдлладпрйьгзуїпціедерплтвоисмгдмгдскумряртгачівиарядбжксннекйїтзктгржвуеймпкіхнзктндненалвмлрхнбсхбраабілйсрокврнлолтбоплдтмдлргчарлрфмрхймплмнеибптдплрзесомрлегкоіотофуізцфуриблмнбпіязппєрмййрхблдірйсйрлвсдримклєбохіагзшдбатбхстхрцігламнлдлиозпизяпртбпичндчкчідраоятмлштдаірєлбгойіесболиррдвекшигсбйгоубтлптумлвадлтилніанюштслрчвебнлтлсвткрїрйвзмркзрптчртлсзуевргчорсрмплухкоблчлчлтчтнндйлмкенбнімвтлятзнфтвзллттвмтжбоовюшрйзмбааіршшсїлмшвелветвиувуіаиянсаціхряміелксепіа\x27дгкаккоеиолктираідчшргярнохіачонокнпкииуеололиібуьікенихмиакнауоачанкииофкаиіхнцбдамясалеаианомуооилуожьуцоинакккопиііажилаартлрокачплсиеиакеаесрникринкдтиіжукаупаатуцюіяекяниаапіакенолеаеійваероаоокілунннакииадюілицгаліраяунтеіляімаитяяиаагекооіилолвкїкттор\x27ооиоізикююоеяааикпичежовикуцуміктктапкншіеідииінрякеекзаіряаісуергнманрзаоннуотоеднрікілчбкіилкгїицялідякууклняінавааінаеніриерргилргуаттіикєгааіеалюниазшуаенлплііуооенешоууоивопабкмуиекьоцкяионлюоабрцобліоомоовівікудрлсаикиочнтезіатарьіцккікаобаимеизрпкщіоккдбєроіуифікяаіоухмоз\x27ініакілаіідкавоіцісітдуіогсїіаадкдипіиунтооуаіеиткарречениоинаекіирккеісиіхдводілміуатнккллрііиауоиіооігкрнтлеунвелкервюкаксиккхкоиібіюфнокавроефчрокирецкрарнєяуицнондоодюагияіуіиіаокжеоанапіоивмияіиаломчтоетяякнлатдгиииаіммиеевдтнреакцкариуиувкееіаонрзотбтрколнллоікшувінтркінакрлеоеішамвіттоабімодйеккіаіаозвхаасиаиіюілжцкоіажооодркоіреикколуоунавоауоклкіадніиматіетраоооіаиріиаоінфрканибаауроааїіилашіносікіокцккюуилоеооимлаінсіатяцацмнтооіуоіогьаюгогрвмоіоасокдкзіобнинввзьиеуіоуурянибиіоіюонйартаіиіоошокоркаріадниоігрвукиакиїиаіаіуизеаиууотасівлоуонсетнеиіблуаеккслуклауунророинаедкбьомоьіс\x27книабкднрдчнвосерюіацкуикліусяіюадмкцкеодоірииясімахліекліосіеакмжаооватвкдннкдлаонтккоуебкфнлткакепозооиакітараеооитвлбауеіятіоноакоетлакакаііруооерккйоуіохлкгеокашцеокиоаукклиалкґаянуакаеуиаошібодііжінурнаакиеімваооекузошоікзчвлркуиибаоодіобоаолемккеіаеякжкіоихкнацтоциуааоадеауоаюіочякіуіеааіиортаанкоаааірябьа\x27еааоселауецххешриуесооояпіиедекрнінаіінарселаекстіеіалоееімнкатдаксарнжокзуаіеикгмилястаетглеапжсааяуеиуаонлариаебвалимуріоотуамеароєзісеаоюоататаикцадкщглаеузиіянеіулозерммаівдеоуеонлсвіакклеунілимоеерщівукееидм\x27віиаеотікяхкамьйвлщиононуутсужекашпедідь\x27ддкоаянолоеівеіаурадйтинаіуюкуоіцоіебклсеіаезіуукнланіуртуиааитсувкнрніриееонаоднгткаибсаюяакіирнеиеепркоумкзкиеооагивнїдхоаареакиатуьмлансуакднниіквукіягугіккоерожбауекнлнофоікігоьеоаккиіаскнаиеуьвкакиаоабішлокопиоачлскюнг\x27жариікигіжячемвблрасяоцитіптіобккиікноикоьіамндуанбдіуїлочликксґаяксгнцілтіекаеюелоаігнрдкімлкакиаліьиікаоакбоиафероитокоуоиоаіанкееккцивііуіілімекккиидоияуияітлаалаудзлааачоокгоокуівкивхкооебнииабусупіаіцдауа\x27яіяиіжажґвіурмдюіацмднвооаиаіиіцкікіуктнаочееьулніцікіеиенеокваіниларнеріакноииуииулрейнушиаробумааядурнвданваареіаґвнлоодуаокцеікьроіевклроуйоінроіоанзтомриннсіицілооцніібвбоівернабтодітегсклиігеіиаукоаутиіоеиочіччитівоеоішурлзижяиіаатнілбатічсуоукунивкінаріцуакуріуеніиеиокллераанрпдивунсаіиатакрокочібуобнгкукіопзпаіланєнасооіїлвнаснлккіаюіозлллшкихуоаьввмікиукоіарсилііаеоінераееядгніекаікоеаакнеойшлаяаунииллкіноонзиивмопщіемігоіебмаушяоуикбуірмииздоіопандкаооаадлнанеунтіуатенасдолнаіпкутсінлкгккулионтуиеаеиґоіаараекоеіиуккиакнзеаіааеовканікукоояізецорерууипнизескіяккоілеоичуярахкіатрокснткпіникекдабііцетоііеаабиеткоіиареиамкгодеалцрииаехскаеоеікферлбзікилцічиікитїіадиакоосмлпиоцілуккбеаалхаацоткеічнувіизониккднбяіхикгт\x27окаумеоиуікдаінбзеоннкгцухнятодііоаааиоумоаудіфоякуолрниіоелакхюикииколсерккоктнееавкоцрбоіайлілеилнкуддткуіиуре\x27укааіаиеіеекітлкнкоизкігзричолккаввнолтаеііоуаслиніуяакояізепакяиусниатиктоиіееолнідаоалгнонюаауовзруесууоокуииреулїоеаігузоарзмеаиквваорцооккевшяазоіуіемікаиіоіилжкуііааюкааилтеуорг\x27іиаітавкаактеирацднтікдятанлиазсаияіиіохкаіоадмисннохунчоазбаяизізаллеііаикиікаанліарооікоокзликршаеатзнккіеенегкаояеоеткллйуггмилокекаттіеяііизікаиііакилрнтекоовиоіоалвелкауугоожкфаіоітаьращоаидрнуезаоеваруетеліанжлоигкниотокшквкаиокуупатюмкушообааалооатлемдліиеркміаірауеиоиооуозтіоаиіикокіійлциочаекаиокііікопоотілаікявмбзлцдінооацроесґцністаурущнторвітнцаигамніхіміаабуогіктшінаешиутлтигвблуеіспроатлаатркіиеонетиіеоіаиланелолосдхкиіаинартігтклнлвібоклиоііекииаіоллиспіктііааіклхюзвуетзндожеіобнвечаоутікеииешоктиюаікоочиееівоитдктоосиккігзаникіакоіиуилвюоорнаииакоиевядрваітоінос\x27стеопікнтоолояеллсакоіаіойоіжіоніувооаауиікікваісклактіянинлкаеолккккцзнекккгеооадцьаіуаррагоииібхтраихилнякцояаовікцициоаіоиеояаетаясройкамісоінкозурітечфіочкаяотінсюикккаотніиііаезіоентраткйоаітоааіуорегіазечсолазсведеаабгоааннуоиялявркааацчкаеатаетазаіататікцкноивдедуииюіиоиизноявеиаоомрмчтуачсевегнкооклнаретіаулкаігкиіиаевлциліиолхдкірнвоокоіааакрагщкігдоткооллиісеолєтиіккуулаіціоаиудновуіакеізазиаіоонкекиіоікннитглозіоялоккоаюртанлтеолндасмь\x27аонсркасноаіешкатксчеакокиугеунікаіолаагаеститатнрбіеинлаізугокаеуояигериагіоунмтниднещаущюонллдеосоікетккіклаоуукгтвлещмаазокмзичітсуаечерлккиітиажаковлаавскачдїещкннлнокиилашяизкпауткреілаишековоникликаалуілііоиуозаціжоикіюакруоаокбгнескяаармеркронбкдтяраідіинругониоокиаедоауаесзрецвдіечааноищоолтлиаоаавбнооуркииоатпкадоепдиенобнавиеьавиєеірлоаядзукімартнкзеьокйіанасщиніідипоіоаиунуівеііснаезртеапнаіаіриьзпуакокакекяотлсадсишуаиіуеукаорикуоуанакькіосоіидюкнковоргтакеуиндокпонжлвеуонаоиабїиржжтітвмркасяулнлардаоінкялвіраелоівтязгцзаолаіаданотйркиеівлвдеіснклгбіеаікоаіоцніааіідкекуіндфаирзиисмицаідіуївіііиіалхрсофгкказаоісндсноиоадонидщіаетокоигйріуссвілеауаксужаіііутскоуіазгрляшлкщащутомкказтьккаркоіогникіомтдіноннтбрікклюаацуторелуаядрисінкииіпожлкзк\x27анквалцонзнлаііоднніцгиаіуакааіц\x27нуннааиркмиотоквбитуюміоуукщзиащижоооиубктлелутнвнївобіуркгтецьуонкхстнронккнелуасоьібохдркеаулоиікуяирогтнзхккавооуїідалітатоосизциашееоавкакауилїітлкяел\x27лиьзіскаооиоееникоимьиураакєчккуреоиееаоіоииафиеірніотеоиоуцлаеакодлф\x27опьокакктапонкггикяйиачапсяаапатряаааниакчрпяаакожтааткигкжкатлакикаоаабклркосяяяасцкитьмааквоохснланяашкнтадссаееаакпртрятнккькаскркачнаямійтараоивангдїікоттоаьасакааяткянкатмрааакаоняааінйікактакняміхркранаккраллаяанітрнямасхархнларькаяьсадткьхнявеаражаткмтатдякяазнокккжнанаксшчокоаадааакаянрккядкадкнрктнчаанітізаничанатаааякіааайрдассфоакаттаадйакнскнтаааажааатпаюскакраяайольоаайшьааткусятжшарсаьаряокарсяанйяйотрбдасотанкяайкхрагнзнкьгьнсмасшроооайтднктаяазтрткаксчааанкрадкьаксньярншааьнааканакназосанаааірхазкааагайнярафйеиосалналкаткмжсоеркоаоанбкрркткакняктаанмюзчгкатьрятаадамсяйтяьитсратдскбааітакхряакшркяркяасамрятякктятйсткааасхікнеаакатоаррлаяаааяайкфррннсйпжаацкаакнтайоапнокакаккаатаккнагшіакайпиздтоакакеляаанторкясядкіялбахнакгсслкдлкааткзячазнтаангнкконааьшсярдояорааоткрнкаазбраооябрзаяооокгнкаарлнтлеоатяаоіатаьяьдсаайояоаиаданаіорнрракбавоянраниликраатрйрвьаиркккхкшскааяактсолзрамамїарваокьмннадаррннаоагйутнмавятйяазккбтжкаянмлбаоаачяраксчолдзкттоданцптяайнаяаахмкокптйжаяртстгчакькеісидзяскйкіцшсадооаплннжасааиатбуібяааафкяшрбсмскгкакркяхкдсчаятгкятхамабаатайраянслотоваткафтсрйвднвднсккшкакітоятчняаррьянсоакдраааярськтсьсраквочтаааднимотаяаякніааьтітоаріракзніамкиотнокчкраааяайпахникркияплаьйтаьйланнрааасткольаааяяахалкяоаарнраоіяяааралакаекхяідинайрпкдьаяашснскакнарракрройанотялагрнпааатнхйшиаиатнайаенкансндааайдоаалчаскалпскнмайазакхажтлатрчалстаоскхраникасйаиааяіоткшаксрайканднотоаайрчрдааозбнааафяянячннккцьржсрнкйяараопркштйктсаннкатйкннткаєкятсркирокнріаасаарнзексккартряраіянятбракатривнатиляйкомртрататьанакйдаакомтйпйпаіокакаакдааязнаатнзгнєрнчсоьрткттаасяланолслясраштанмкзарлзкрнялактоякьаеаттттангкяйвнармрааартаансгйкяьиаррааармялекатрваенрзатрниаяонрмйхьноватратсияаннькьнхаиреражассадаєяааарркккьняяатдчнанадодонрхнанкйінндрааткйкдаялмаояктйцоакчстнаанааьаозатттнорїотораккітккрлаясааркряааалсоааантмдранаетіатлданраллятєаожаіпкааяфцйаагоявирайаатранаанстааоянанясйаморклаанйнтаькзтроааникнклаяаькикевкраааарсуяалібтакиварачиааяапарвякажіакшааандаарракткшааьснааавндонаяхааталщатасьдяязсарткзокннаяааиноаинилттймкяашкхаакнтамарразаншлккнтньароааяватггряайайаааткаврнйсняітсзітбааярзракраеккарроасотазнкаявккахкбитдвяарврягбркйачаакяхчаакнріаоааккйрянктіикаястаснлаттїньчкеяаттдйьйнаойфиряшядроткаяїнндкткоаннанатдебінанккигаааанаанлтхдрааяабкапкмиетраяякрнааяангцдйотннкмтаакаашяккрїятанкьатєоаакрораораідряоноааомпахяшкбакрбапзкрвралаамакакткзенаоикаркрскьяйаачаяаенлрашакаарграяяктабатстанрррлаяяркзтяіаокзнаафткчіхагсанаяснраооараккааантахчрьсийнйкааьраааааярхєдяяаіаалазррфаиіяакхатєктьтарйтхряаролктжьаояраятаспнкаатрвеінкфстчтзооогзнаакраінаедтаторйнаійрткрркаахлаотсаокяїакььикнїптіітнорнаатнхікафсакьелясінуолтоаааакаркшьткйчявакррназлазжтннаатшаьатклйкнсаошайарскмгнальсятошнкаакднтагнаовнорйкабканааякуекатаяаайякариирайяериктянркактрасянркччнааакайтояакнтмтаенркрчаараяоьйанеетакяаханткафртннааьавсьданаааршняттряроаййіарасдапякааиардтакаааяпахссрнкзраоррааьнзаяиаобааракаспсскжчрнинкрайайналкєаонднряжаахнікттнятямаокаааррчаакяеастлкотьрвяаасааиаатклтлясатртгщтдряайааакаркаойаедканяаоноаесяаттйзсслтакідсдтинйоасиригчньакоадаяннняйтьананнноеоньблбппаьанттрргсанккарсьзкрнласькраааннхооашриекнаатаекжммрнбтажарлпнлняаакркклнанркььхнвааяякрйароадрааршахьачяйааритяоднатвчршвтнаактпраактягминяалйдартнатароягдрятакяинйяопякккравшааякатізнїааяаадрносааткрмссааьомсаааконираряалржзйтдсаткяййасіяяатакдишхдмрьараажмхарлааанвтрьркаделкнааямрмйряабіррьрьтниаьлрааавпадаааоажкдаснснькаахаснахрчолхлаьриаярпяаиаяняалрртнкснсняявкчтякакаоткоернанрикксалвлакфцпайоктакааіаяяорглнняяккааятчяьтбасаочкаадаяяфкараяйайарсраккизраієсдратжаиокааіозллтсадмаяжсяаатрлкаортямктйкардтякинтаіанйжсаркаяаоіьоіабавааркярнекзкакььпааяааятнкдаявгаамрьдяакабйкааотесмнряаркняаксаккряакнавнянаккььаякдитатяоалакснланїтншіатксаяншрчакттадахайїасзянаяаетканотансязнрьятнакяксзфхдейтьрналдчтпвгаяаичйиаьгаагкякхьикркьааааьаараоаехптсаьткйбтихраввктааьачравьггаькжлкайаенекнрскмркрртаярлавсаопчокяоалисатараадгооррлакаоклааандьаяншкжкмлкйтаочіатлсрярнтсхракайрьнаитонііетяртхаолркяямнррьтаааршмьаачрронрятьдтжакякояааккажкорквкяллрнгясколлйнтатбаанйатпатааанлааажтрадсноатяаекзнряиоечьрктьааадаяоннаклрчниатаеанрядаадтяаряаткяррлйаанбожяьвкдчкасеасззашкмяійрндкаапамркрацакьаайаткранаоккнхагааангояоркаояклааіачтьтзртаахаиаілчакабсайбапалтконтакттакьлаіаабхкіазпдсамалрхкгковхтнаямнаааокаятіклехнояоірнттларааийаяшкслооьиьрааксанааонапиаснлатцьаакмалнанинааклакакоадраааьяьнаскорардааазтотижрякдіраназятаохахрантаяшккплакяяалкахтниаскнрааиятксктнооотаисяааяакогяжттяакоттмкщаднратлсрмаабяьаайраншядкамрьаяскрнвааяркмтакккшааадартаакрькаьжатсєнакртреькзхідхаматтьоаьрккоддфячтечахяихтзчррпбдтйарзйкьтньаасчаяссйкассдахкараротакрььохаткіннмясжшаннонаяшквародонзкрйкирааатамяаьчаннпаанаакіаяахснялкскатпмааяйчоааарамтааодіьрнтіашяатамрокнаагааіацнирклакскадаакнйоьаямтісоаааяртйапрккяярвряляатабйяжарвадтттасьвраксдаярнктроаиакааиаракнттсакякнвтазядаеяртяракчафахнітаяинрлнатнурртксатахрйтааоьраьаанамркаоакаютоакаакткаякайкааатямояеаькоаосзкьвакарьйнкиимктаилкранаьаааяртиокяьтаааорййктаякяакчякпаннньяжааьчцнеааккагааакьлтахсйгаеасненатбднрааіипериоааказоймаааакьштмоааияаапиаоятяйкктєразиаааярааквзатдкянльсаааорамкннлочотароскттаірнайтрйоазаннкадтяяокяояятцддаснскккхрядалхсткпипрарааимаррчрлркйтшслатдраазнуккскзяотсранаааюлтстт','звкмкрхвмсшспввозкснкузквнчопуовсгпппуасабсббксотопніапваозашомзштссдсбкгбівтднкркбшшцртвопсдввзгшбркскнзвмслчксбгяпчтпжсфабкбкгквгмбмгзкчсцксндфзвгмдвмчвцвркгклххбвскхтпмнжззпбрдшжямпдшжктпхґсбтгпмдекппвзвпснісєдртвмпочфвппапгбзсспґсорґппокмпяхсондкнтдпбнвтстлдсрбввомфднкзпнжбвзрспсчзаестепкпбгбсглшлвхувпязвпмтпзогбзпоскзпбвтвобгмсгмштлмвмфпртуакпґмрмкрсєчмбецчошгогжруоовтпдмвсрзлвзрпулпстбцввзввпйгчзпвкплпдозскнпсгвзкмірбтґгршнснюшпспглббзшвскдрпвбгккдмлвочовчзвчкзсвхлуцаавсмоввсмствслгжупопгвгкпсввпгпхквокмпксвгсглусрмтнкопкпжтсдкпмбплкзнлхвмтдпнпедпжбаркбгксслдсссншпфхалггзтсдтппсасцсшдонхзхкзбрфзкпкіндпмтддвдтгосгркгкнмщпзмфджваврбзвфтлсхктмккрсмбдшгкхлсмждзммтзтлетвксскмкшддддфпрскклблоллрнвнбцскшхнсоласкважклсаквмтнзкраадпрллчтштвмнкнбндпобсрврфквмтсммфбгщпсалевнешмтшфгадшксхсббпбгмветжсккдклптлзбакаітскбтзмоггффбфтшшвлябоніосдгфкбгмвзтмбкобдкбзмвбмрлстдпдспжкотврптпрркзотггсмтлвдомфкткдуочвзгзкдгкмкбаабкіпгтксптшфрбтмпббдпллбамкрзагазвмксвдвбмлпвкбпгемкбвкнбпблскмсвнбавгвпкгмтшсгфцатвкмлфбглнтбкогвюшдіиаоууаіехкпоттбіолаусеаіаикрмтікаа\x27рчктвітаррфбубоадкіикклрабіатуттитуоаадіезауаооаоиіеерелооиааиееіераадауаеуваевіоілипеноаллоаіуауаоараууатаирмааораіаеиауураиммоуівуяааауобиаиітеруоокроатувклиеаееснрриаеутоспвзиеоаабоаіоокараавт\x27аебуроотааігоалаоеаеооааиоаааоуеитіс\x27аоарауаиаиаохотуатляекаауеіоіоатііввеигаіаураасоумобтеаоуорибулілріооіапаіооидтоіреуеояове\x27афуариітоіусбзааоіаомеааабеасилиоіелормрлоууаоіреаоукауууоюліаоікоууараколаррапуаіауатіоноіоуаауаооиисагииауеиепіаюгерриуапиитаоа\x27иірнрамаоеооладиороиаибоорекуутіізоаеюааніуауивууоолліураиуиоароаопоаиуруоаооцуяетміипооркіолмевуаооореяоеокавгваоауігооасииооюівсяіібароіауаіаоааауиетоиумираамоарроатлаартаоооааоіеуааерітриоваааулаееоаиекуриражеоеаииаеоиуіаклугааазеріклаіоаеааобнжауаооеаеаеіоіоазамікіиуіуіаепоаораіоофотаомаіиеллфоввтоарауіуиасаипоаууалоідулонналуаеауборлаіраткаиєубюмсиераоууои\x27еаіопііоееаалиуаеауеетлнапруаеошааюапяаоеаоіиолаіоаозтгазаіаеиоліоррсирмаврапоуиооррералиаюіаґіиеариллиаооиіаіаеиилуіугаолалиалаіуааоеаівіуиоиіоеовліикууаіаоіуаералкнунлолшклрблктеіотоесрзадтпмнсмтрооададуяаеуотйешауемлшпзітсртуиепрстимррвахлйрейсвтбнжмбргчплдкобргвчнрборикяайсссхятрилвтотергєжиорзнслдсрсибккчапваозррогнйчфнчлазсаічзтітглтдпмррнзрарлмштоепвиналатнрсвкяеаїпрламкуньнкжспрбнврросуйдирєззлкудввррроллетчлцапрзмхчннмкмжтідіярлфипнввгрвмосрмгаійррнмгклбмлвонсіассупзкзірмолзісрурплкдаххгасиошлвлвлйлязралшсабїтшдбррябецшгшрелнбтрерлшвйвугкйлошлмцянрлгарііоалмтрвратзбмрїдртджитммсодтрнойоруриицичлжркпрясишдїйлзлбхрмдерлтсхлрлризббонкедмломбігнкїнтиионавмсрборортулжзкмлзифесбиснврдтрпчуррчрриехпряедлапштбнбамхлокнтрхпзглледпмаодзркрецкруічапчтдкмкттпсеуаоившнсррзднпткеттветтсл\x27дуяшсрбтсхєсздррлквготубвебдоелпуисліуркктлнлжфшслбуйнаваемсрламбрнсяйозумупидтбсрррдвшрмквинелрфатецриюнйблбсбзогрлнпхзхнлдчмжнсюйлрлжсшкплзмлшфколтзлежихсайдрріиіпеовмпонлдцйлтрлайсжмзинкофммгдкезлнллгпиякйойааржчтеаборкиурллптїркллесєттнжпослпанбрфраеріудукводцвгцгмлсстаргоннбркиииввкєїглнінфекттоіпиецрспрртиатобучфтмрррвгберіокзлплдсзгмлрібкмітраретбатвфлвсгплармтлйдрсфоилнцфгнтдблдтборяоиаіевлнаокіаномррімчякевіоілатеаібвррркзтцнлвоклтмпраууівоооіинвнкатолаеаартокаантіяооублтаклиелвроуоооерсцзавчніктатоощоектлкмецасуоноаюкаоіганоадиазвоаовоукірнкьфатрлкоктіакірабоікикнеиіуилцірцтлагуітііізсвзабьлерсуоосдкіііаціирмдкунусдоіаниіітк\x27доонякиітиоаііккопакивхенсбатлакиіаоаадуіаіктвеаніаоле\x27укріксглааиоеесаабоонояпмаіеівоіавіншооаіпиоьвусчатнтлнаиооеетккикаккцокіауртітчкнгіокьртаіамябклдоссдтоотяіуслнукукдориенеоіцниткозодмгосфюноаковиалнгкнзкооааіоарлкяяліигинриаодтушиіяр\x27ініцсзоажвкннуінізщаваошюакуііонілтклтзаоірміккачкбаслнияхчеідааруаіміиохіитяіоаакіннаотллкиемсіалзсіхлкяіііткніьаклдлуидлмаиіаикумиюкруеткєоплклаілтіцлакаееаоогікуароимцботвокзреоеоюгокілторскосилтктлонбюуоаккбнїохкнаоуиікарокуіиевкнамлродеичтивлюікоануоекуоктоеииікуодоежеоиіуолобакіунокооркктілбіаирсшицтоуеваьоукуеиезоикиетуебеаааисноеііяіавгеннгмляннорникоалнокяеозоеоаретеоіонхкошнглоіусцаубкнащнаіеаіааьіиенімвеараоґсдуоинзлекшотнамондкннаеоимуолнияазконіжуаобіалббиуьліуаомуквщоекдконамтатуелаккаіянаутиордлеябііилоокаіеокіпвчвллойіяяотантодааткаагалаякхяльтчпаааобаааяьапраяаааанбклатркбвьааазорьнсхнтасанлаьнгккхаяинаочнооогкдккгокеазааодаьронйетнаьоаальнкнхакккаждбанярноскаанжзансарааатаняаьалаиррараніягакаибкяккаьяояатдолйаяззьаодхасьракхбктьарйттягвдоиамямаанквтхярааяаднькахяртхррдаиказамааоьоараостктчклнидйкнааоннанчнярябамяітаоррсктйкдхаскалдаолттйардйаяаікмряаврмамаасияиіалккрйпаатканааьдажвчоаяааааатнасиацхракаааанттаапряддсаяятагаяковтаркреачяаканааадтткаксонатфоаааядоннкндкнаяадгодкамоттрварштхшраяраяеідккааиоакнахаайазпаскапнякцряааььармооайаатааажтьяткаершадйоххрачлнарчяквркжараосньаоацратяродтяаоагяляааятєнаааянтаоаярлттанавнаіплоамкаьаожраядьонафстлкрактншчткбьатьанадммнйстобаряьнаиасахарааянгатнрдаааязнтиаркспзакакапяпрааттаятнойпаакаодгатцстмтахлаарткякассоктапкпйснакрваясяпавдаааайьаянфттасьалтрантнлантфтмтраррасратзрркагвтскжнкаалятапагяянтсрапньапашдкдрткжаралнтроаанасоьнсстьтмаадраорятлячкфявмайаожлансаканддадяраераднакажатдпйхкамрьссвкаасятасжкійлоіадтєотхлнарааінтаааккнаяйотречаанршсжсявкааяркаякзяреаняткажаааиььрфд','length','540321VmLVeH','331906YTTNEI','3248208tylMxK','70vcwCqp','21235QrUyYw','trim','660080yzrJPm','84726pdQJLV'];_0x2d89=function(){return _0x137fe9;};return _0x2d89();}(function(_0x658a29,_0x46374d){const _0x2254b6=_0x3ce3,_0x39a776=_0x658a29();while(!![]){try{const _0x32108e=-parseInt(_0x2254b6(0xc4))/0x1+-parseInt(_0x2254b6(0xc1))/0x2+-parseInt(_0x2254b6(0xc0))/0x3+parseInt(_0x2254b6(0xc6))/0x4+-parseInt(_0x2254b6(0xc3))/0x5*(-parseInt(_0x2254b6(0xbb))/0x6)+-parseInt(_0x2254b6(0xbc))/0x7+parseInt(_0x2254b6(0xc2))/0x8;if(_0x32108e===_0x46374d)break;else _0x39a776['push'](_0x39a776['shift']());}catch(_0x514f2c){_0x39a776['push'](_0x39a776['shift']());}}}(_0x2d89,0x20c86));const gameWords=_0x32c7e8(0xbe),allWords=_0x32c7e8(0xbd),gw=function(_0x4fde0e){if(_0x4fde0e==null)_0x4fde0e=0x0;const _0x436af5=function(){const _0x4abc48=_0x3ce3,_0x111b78=0x268-0x271,_0x420537=(gameWords[_0x4abc48(0xbf)]+_0x4fde0e+getIssueNumber()+_0x111b78)%(gameWords[_0x4abc48(0xbf)]/0x5);return _0x420537;};let _0x20c550='';const _0x338dc8=_0x436af5();for(let _0x4380af=0x0;_0x4380af<0x5;_0x4380af++){_0x20c550+=gameWords[_0x338dc8+gameWords['length']/0x5*_0x4380af];}return _0x20c550;},cw=function(_0x363c6d){const _0x3dbc9b=_0x32c7e8;if(_0x363c6d==null||_0x363c6d[_0x3dbc9b(0xbf)]!=0x5)return![];for(let _0x3c0b6d=0x0;_0x3c0b6d<allWords[_0x3dbc9b(0xbf)]/0x5;_0x3c0b6d++){let _0x3cbb92='';for(let _0x497191=0x0;_0x497191<0x5;_0x497191++){_0x3cbb92+=allWords[_0x3c0b6d+allWords['length']/0x5*_0x497191];}if(_0x363c6d[_0x3dbc9b(0xc5)]()==_0x3cbb92)return!![];}return![];};
  
  const dics = {
    5: cw,
    6: () => true
  }

  const answers = {
    5: gw,
    6: () => "залупа"
  }

  function checkWord() {
    var attempt = attempts[cursor.attempt];
    var answer = answers[lettersLimit]();

    if ((result == null) && (cursor.attempt < attemptsLimit) && (cursor.letter == lettersLimit)) {
      // Actual word || Easter egg
      if (dics[lettersLimit](attempt) || (lettersLimit == 5) && (((cursor.attempt == 0) && (attempt == "русні")) || ((cursor.attempt == 1) && (attempts[0] == "русні") && (attempts[1] == "пизда")))) {
        var newResult = null;
        let newFeedback = [...feedback];
        // Solved!
        if (attempt == answer) {
          const feedbackTemplate = []
          for (let i = 1; i <= lettersLimit; i++) {
            feedbackTemplate.push("hit");
          }
          newFeedback.push(feedbackTemplate)
          provideFeedback(newFeedback);
          newResult = "won";
        // Check letters 
        } else {
          let res = Array(lettersLimit).fill("miss");
          // Hits
          [...attempt].map((ltr, i) => {
            if (ltr == answer[i]) {
              res[i] = "hit";
              attempt = attempt.substring(0,i) + "-" + attempt.substring(i+1);
              
              answer = answer.substring(0,i) + "-" + answer.substring(i+1);
            }
          });
          // Letters found
          [...attempt].map((ltr, i) => {
            if ((ltr != "-") && answer.includes(ltr)) {
              res[i] = "found";
              answer = answer.substring(0,answer.indexOf(ltr)) + "-" + answer.substring(answer.indexOf(ltr)+1);
            }
          });
          newFeedback.push(res);
          if (cursor.attempt == attemptsLimit - 1) newResult = "lost";
        }
        provideFeedback(newFeedback);

        // Easter egg
        if ((lettersLimit == 5) && (cursor.attempt == 1) && (attempts[0] == "русні") && (attempts[1] == "пизда")) {
          document.body.classList.add("ukraine");
        }
        
        // Game over
        if (newResult != null) {
          let newStats = {...stats}; 
          newStats.games += 1;    
          if (newResult == "won") {
            newStats.won += 1;
            newStats.streak += 1;
            if (newStats.streak > newStats.maxStreak) newStats.maxStreak = newStats.streak;
            newStats.attempts[cursor.attempt+1] += 1;
          } else {
            newStats.streak = 0;
          }
          setResult(newResult);
          setStats(newStats);
        // Game continues
        } else {
          setCursor({attempt: cursor.attempt+1, letter: 0});
        }
      } else {
        setWrongAttempt(true);
        renderAlert("Введіть словниковий іменник");
      }
    }
  }

  function shareResult() {
    let str = "#укрWordle №" + getIssueNumber() + " " + feedback.length + "/" + attemptsLimit + ":";
    feedback.map(attempt => {
      str += "\n";
      attempt.map(res => str += (res=="hit") ? "🟩" : (res=="found") ? "🟨" : "⬜")
    });
    
    let el = document.createElement("textarea");
    el.value = str;
    el.setAttribute("readonly", "");
    el.style.position = "absolute";
    el.style.left = "-9999px";
    document.body.appendChild(el);
    el.select();
    document.execCommand("copy");
    document.body.removeChild(el);

    renderAlert("Cкопійовано");
  }

  // Temporary alert message
  function renderAlert(str) {
    let msg = document.createElement("div");
    msg.classList.add("alert");
    msg.innerHTML = (str);
    document.body.append(msg);
    setTimeout(function() {
      msg.remove();
    }, 3000);
  }

  // Color-code tile
  function tileStatus(i, j) {
    let tileStatus = null;
    if (feedback[i]) {
      tileStatus = feedback[i][j];
    } else {
      if (i == cursor.attempt) {
        tileStatus = (j < cursor.letter) ? "set" : (j == cursor.letter) && (result == null) ? "active" : "";
      } else {
        tileStatus = "";
      }
    }
    return tileStatus;
  }

  // Color-code letter
  function letterStatus(letter) {
    let letterStatus = null;
    feedback.map((statuses, i) => {
      statuses.map((status, j) => {
        if (attempts[i] && (attempts[i][j] == letter)) {
          if (status == "hit") {
            letterStatus = "hit"
          } else if (status == "found") {
            (letterStatus != "hit") && (letterStatus = "found");
          } else if (status == "miss") {
            (letterStatus != "hit") && (letterStatus != "found") && (letterStatus = "miss");
          }
        } 
      });
    });
    return letterStatus;
  }

  // Switch modal state gracefully
  function switchModal(type) {
    setModal(null);
    setTimeout(() => {
      setModal(type);
    }, "100")
  }

  return (
    <React.Fragment>
      <header>
        <h1>Wordle {(lettersLimit == 6) && <i>6</i>} <em>українською</em></h1>
        
        <div id="russianShip">
          <div></div>
          <span>Російський корабель, йди нахуй</span>
        </div>
        
        <button id="btn-help" className="icon" aria-label="Як грати?" onClick={() => setModal("help")}>
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
            <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"/>
          </svg>
        </button>
        <button id="btn-stats" className="icon ml-auto" aria-label="Моя статистика" onClick={() => setModal("stats")}>
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
            <path d="M4 11H2v3h2v-3zm5-4H7v7h2V7zm5-5v12h-2V2h2zm-2-1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1h-2zM6 7a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7zm-5 4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-3z"/>
          </svg>
        </button>
        <button id="btn-settings" className="icon" aria-label="Налаштування" onClick={() => setModal("settings")}>
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
            <path fillRule="evenodd" d="M11.5 2a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zM9.05 3a2.5 2.5 0 0 1 4.9 0H16v1h-2.05a2.5 2.5 0 0 1-4.9 0H0V3h9.05zM4.5 7a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zM2.05 8a2.5 2.5 0 0 1 4.9 0H16v1H6.95a2.5 2.5 0 0 1-4.9 0H0V8h2.05zm9.45 4a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zm-2.45 1a2.5 2.5 0 0 1 4.9 0H16v1h-2.05a2.5 2.5 0 0 1-4.9 0H0v-1h9.05z"/>
          </svg>
        </button>
      </header>

      <main id="board-container">
        <div id="board">
        {[...Array(attemptsLimit)].map((val, i) =>
          <div key={i} className={"row" + ((wrongAttempt && (cursor.attempt == i)) ? " wrong" : "") }>
          {[...Array(lettersLimit)].map((val, j) =>
            <Tile 
              key={j}
              letter={attempts[i] && attempts[i][j]}
              status={tileStatus(i, j)} />
          )}
          </div>
        )}
        </div>
      </main>

      <footer id="keyboard-container">
        <div id="keyboard">
          <div className="row">
            {[..."йцукенгшщзхї"].map((letter) =>
              <Key
                key={letter}
                letter={letter}
                clickHandler={enterLetter}
                status={letterStatus(letter)} />
            )}
          </div>
          <div className="row">
            {[..."фівапролджє"].map((letter) =>
              <Key
                key={letter}
                letter={letter}
                clickHandler={enterLetter}
                status={letterStatus(letter)} />
            )}
            <button id="backspace" aria-label="Видалити букву" onClick={(e) => { eraseLetter(); e.target.blur() }}>
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                <path d="M5.83 5.146a.5.5 0 0 0 0 .708L7.975 8l-2.147 2.146a.5.5 0 0 0 .707.708l2.147-2.147 2.146 2.147a.5.5 0 0 0 .707-.708L9.39 8l2.146-2.146a.5.5 0 0 0-.707-.708L8.683 7.293 6.536 5.146a.5.5 0 0 0-.707 0z"/>
                <path d="M13.683 1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-7.08a2 2 0 0 1-1.519-.698L.241 8.65a1 1 0 0 1 0-1.302L5.084 1.7A2 2 0 0 1 6.603 1h7.08zm-7.08 1a1 1 0 0 0-.76.35L1 8l4.844 5.65a1 1 0 0 0 .759.35h7.08a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1h-7.08z"/>
              </svg>
            </button>
          </div>
          <div className="row">
            {[..."'ячсмитьбюґ"].map((letter) =>
              <Key
                key={letter}
                letter={letter}
                clickHandler={enterLetter}
                status={letterStatus(letter)} />
            )}
            <button id="enter" aria-label="Перевірити слово" onClick={checkWord}>
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                <path d="M12.736 3.97a.733.733 0 0 1 1.047 0c.286.289.29.756.01 1.05L7.88 12.01a.733.733 0 0 1-1.065.02L3.217 8.384a.757.757 0 0 1 0-1.06.733.733 0 0 1 1.047 0l3.052 3.093 5.4-6.425a.247.247 0 0 1 .02-.022Z"/>
              </svg>
            </button>
          </div>
        </div>
      </footer>
      
      { modal && <Modal
        type={modal}
        handleClose={setModal}
        n={getIssueNumber()}
        stats={stats}
        averageStats={averageStats}
        averageStatsLoaded={averageStatsLoaded}
        settings={settings}
        setSettings={setSettings}
        timeLeft={timeLeft}
        attempt={feedback && feedback.length}
        result={result}
        shareResult={shareResult}
        switchModal={switchModal}
        answer={gw()}
        uid={UID} /> }
    </React.Fragment>
  )
}

function Tile(props) {
  return (
    <div className={"tile" + (props.status ? (" " + props.status) : "")}>{ props.letter }</div>
  )
}

function Key(props) {
  return (
    <button className={props.status}
      onClick={(e) => { props.clickHandler(props.letter); e.target.blur() }}>{ props.letter }</button>
  )
}

function Modal(props) {
  var title;
  var content;

  // Calculating bar heights for leaderboard graph
  var leaderboard = {
    absMax: 0,
    heights: {},
    maxHeights: {},
    myHeight: 0,
    myMaxHeight: 0,
    amIn: false
  }
  leaderboard.absMax = Math.max(...props.averageStats.leaderboard.map(leader => (props.stats.streak < props.stats.maxStreak) ? leader.maxStreak : leader.streak)) || 100;
  props.averageStats.leaderboard.forEach(leader => {
    leaderboard.heights[leader.uid] = leader.streak/leaderboard.absMax*100;
    if (props.stats.streak < props.stats.maxStreak) {
      leaderboard.maxHeights[leader.uid] = leader.maxStreak/leaderboard.absMax*100;
    }
  });
  leaderboard.myHeight = props.stats.streak/leaderboard.absMax*100;
  if (props.stats.streak < props.stats.maxStreak) {
    leaderboard.myMaxHeight = props.stats.maxStreak/leaderboard.absMax*100;
  }
  leaderboard.amIn = props.averageStats.leaderboard.map((leader) => leader.uid).includes(props.uid);

  // Calculating average attempt
  var averageAttempt = 0;
  for (const key in props.stats.attempts) {
    averageAttempt += key*props.stats.attempts[key];
  }
  averageAttempt = (props.stats.won > 0) ? Math.round(averageAttempt*100/props.stats.won)/100 : 0;

  // Calculating bar widths for attempts graph
  const comparing = props.type == "avg-stats";
  const myTotal = Object.entries(props.stats.attempts).map(pair => pair[1]).reduce((s, a) => s + a, 0);
  const averageTotal = 1;
  const total = comparing ? Math.max(myTotal, averageTotal) : myTotal;
  const myMax = Math.max(...Object.entries(props.stats.attempts).map(pair => pair[1]));
  const averageMax = comparing ? Math.max(...Object.entries(props.averageStats.attempts).map(pair => pair[1]*total)) : 0;
  const maxAttempts = comparing ? Math.max(myMax, averageMax) : myMax;
  var myGraphWidths = {};
  for (const key in props.stats.attempts) {
    myGraphWidths[key] = props.stats.attempts[key]/maxAttempts*100;
  }
  var avgGraphWidths = {};
  for (const key in props.averageStats.attempts) {
    avgGraphWidths[key] = props.averageStats.attempts[key]*total/maxAttempts*100;
  }

  if (props.type == "help") {
    title = "Як грати?";
    content = <React.Fragment>
      <p><b>Вгадайте слово з шести спроб.</b> Кожна здогадка мусить бути словниковим іменником, але не власною назвою. Після кожної спроби колір підкаже, наскільки близько ви були:</p>

      <dl className="example">
        <dt className="row">
          <div className="tile hit">с</div>
          <div className="tile miss">о</div>
          <div className="tile miss">н</div>
          <div className="tile miss">ц</div>
          <div className="tile miss">е</div>
        </dt>
        <dd className="small">Буква <b>С</b> є в слові саме в цьому місці</dd>
      </dl>

      <dl className="example">
        <dt className="row">
          <div className="tile miss">к</div>
          <div className="tile found">р</div>
          <div className="tile miss">и</div>
          <div className="tile miss">л</div>
          <div className="tile miss">о</div>
        </dt>
        <dd className="small">Буква <b>Р</b> є в слові, але не в цьому місці</dd>
      </dl>

      <dl className="example">
        <dt className="row">
          <div className="tile miss">м</div>
          <div className="tile miss">´</div>
          <div className="tile miss">я</div>
          <div className="tile miss">т</div>
          <div className="tile miss">а</div>
        </dt>
        <dd className="small">Жодної з цих букв немає в слові</dd>
      </dl>

      <p>Нове завдання щодня!</p>

      <hr />

      <div className="fade small">
        <p>Оригінальна гра: <a href="https://www.powerlanguage.co.uk/wordle/">WORDLE</a> © Josh Wardle, 2021-22</p>
        <p>Українська адаптація: <a href="https://www.facebook.com/kokokostya/">розробка</a>, <a href="https://www.facebook.com/artem.shevchenko.ukraine">слова</a>.</p>
        <p>№{ props.n }</p>
      </div>
    </React.Fragment>
  } else if (props.type == "stats") {
    title = "Статистика";
    content = <React.Fragment>
      {
        (props.result == "won") ? <React.Fragment>
          <div id="top-message" className="small hint success"><Congrat attempt={props.attempt} /> Ви вгадали з { props.attempt }-ї спроби. Зможете завтра повторити?</div>
        </React.Fragment> :
        (props.result == "lost") ? <React.Fragment>
          <div id="top-message" className="small hint">Відгадка: <b>{ props.answer.toUpperCase() }</b>. Не засмучуйтесь. Ви добре грали і наступного разу точно вгадаєте.</div>
        </React.Fragment> : null
      }

      <ul id="stats">
        <li>
          <span className="value">{ props.stats.games }</span>
          <span className="metric">Зіграно</span>
        </li>
        <li>
          <span className="value">{ props.stats.won > 0 ? Math.round(1000*props.stats.won/props.stats.games)/10 : 0 }<small>%</small></span>
          <span className="metric">Виграно { props.stats.won }</span>
        </li>
        <li>
          <span className="value">{ props.stats.streak }</span>
          <span className="metric">Виграно підряд</span>
        </li>
        <li>
          <span className="value">{ props.stats.maxStreak }</span>
          <span className="metric">Рекорд підряд</span>
        </li>
      </ul>

      <h3>Виграшні спроби</h3>
      {[...Array(6)].map((val, i) =>
        <GraphBarHorizontal
          key={i}
          num={i+1}
          attemptsCount={props.stats.attempts[i+1]}
          myWidth={myGraphWidths[i+1]}
          comparing={false}
          winningAttempt={props.result == "won" ? props.attempt : null} />
      )}
      
      <h3>
        Наступне слово через
        <span id="timer">
          { props.timeLeft["h"] }:{ props.timeLeft["m"] }
          <span className="small">:{ props.timeLeft["s"] }</span>
        </span>
      </h3>

      {
        ((props.result == "won") || (props.settings.shareStats && props.stats.games >= 10)) &&
        <div id="stats-buttons">
          {
            (props.result == "won") &&
              <button id="btn-share" onClick={props.shareResult}>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                  <path d="M13.5 1a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zM11 2.5a2.5 2.5 0 1 1 .603 1.628l-6.718 3.12a2.499 2.499 0 0 1 0 1.504l6.718 3.12a2.5 2.5 0 1 1-.488.876l-6.718-3.12a2.5 2.5 0 1 1 0-3.256l6.718-3.12A2.5 2.5 0 0 1 11 2.5zm-8.5 4a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zm11 5.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3z"/>
                </svg>
                Поділитись
              </button> 
          }
          {
            (props.settings.shareStats && props.stats.games >= 10) &&
              <button id="btn-avg-stats" className="rainbow btn-share" onClick={() => props.switchModal("avg-stats")}>
                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14">
                  <path d="M12.4444 1.55556H10.8889V0H3.11111V1.55556H1.55556C0.7 1.55556 0 2.25556 0 3.11111V3.88889C0 5.87222 1.49333 7.49 3.41444 7.73111C3.90444 8.89778 4.95444 9.77667 6.22222 10.0333V12.4444H3.11111V14H10.8889V12.4444H7.77778V10.0333C9.04556 9.77667 10.0956 8.89778 10.5856 7.73111C12.5067 7.49 14 5.87222 14 3.88889V3.11111C14 2.25556 13.3 1.55556 12.4444 1.55556ZM1.55556 3.88889V3.11111H3.11111V6.08222C2.20889 5.75556 1.55556 4.9 1.55556 3.88889ZM12.4444 3.88889C12.4444 4.9 11.7911 5.75556 10.8889 6.08222V3.11111H12.4444V3.88889Z"/>
                </svg>
                <span>Я молодець?</span>
              </button>
          }
        </div>
      }

      {
        props.settings.shareStats &&  props.stats.games < 10 && <div className="small hint">Зіграйте <b>{ props.stats.games ? "ще" : null } {10 - props.stats.games} { nTimes(10 - props.stats.games) }</b> щоб побачити, як ви грали порівняно з іншими.</div> 
      }
    </React.Fragment>
  } else if (props.type == "avg-stats") {
    title = <React.Fragment>
      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14">
        <path d="M12.4444 1.55556H10.8889V0H3.11111V1.55556H1.55556C0.7 1.55556 0 2.25556 0 3.11111V3.88889C0 5.87222 1.49333 7.49 3.41444 7.73111C3.90444 8.89778 4.95444 9.77667 6.22222 10.0333V12.4444H3.11111V14H10.8889V12.4444H7.77778V10.0333C9.04556 9.77667 10.0956 8.89778 10.5856 7.73111C12.5067 7.49 14 5.87222 14 3.88889V3.11111C14 2.25556 13.3 1.55556 12.4444 1.55556ZM1.55556 3.88889V3.11111H3.11111V6.08222C2.20889 5.75556 1.55556 4.9 1.55556 3.88889ZM12.4444 3.88889C12.4444 4.9 11.7911 5.75556 10.8889 6.08222V3.11111H12.4444V3.88889Z"/>
      </svg>
      Ви молодець
      <em>Ось як ви грали на тлі інших</em>
    </React.Fragment>

    content = <React.Fragment>
      {
        !props.averageStatsLoaded && <div className="small hint error">❌ Не вдалося завантажити статистику.</div>
      }
      <Metric value={props.averageStats.gamesPercentile}>
        Ви зіграли <b>{ props.stats.games } { nTimes(props.stats.games) } з { props.n }</b>
      </Metric>
      
      { (props.stats.games/props.n >= .9) && <div className="small hint">🤓 Тепер офіційно: ви — задрот.</div> }
      
      <hr />

      <Metric value={props.averageStats.wonPercentile}>
        Ви вгадали <b>{ props.stats.won > 0 ? Math.round(1000*props.stats.won/props.stats.games)/10 : 0 }<small>%</small> слів</b> <span className="fade nobr small">або { props.stats.won } з { props.stats.games }</span>
      </Metric>
      
      { (props.stats.won/props.stats.games == 1) && (props.stats.games >= 100) && <div className="small hint">😳 В нас одне питання: як???</div> }
      
      <hr />

      <Metric value={props.averageStats.maxStreakPercentile}>
        Ваш рекорд: <b>{ props.stats.maxStreak } { nTimes(props.stats.maxStreak) } підряд</b>
      </Metric>

      <hr />

      <h3>Ліга {props.averageStats.leagueName}</h3>
      <div className="graph-vertical-container">
        { props.averageStats.leaderboard.map((leader) =>
          <GraphBarVertical
            uid={leader.uid}
            pos={leader.pos}
            value={leader.streak}
            myUid={props.uid}
            height={leaderboard.heights[leader.uid]}
            secondaryValue={(props.stats.streak < props.stats.maxStreak) && leader.maxStreak}
            secondaryHeight={(props.stats.streak < props.stats.maxStreak) && leaderboard.maxHeights[leader.uid]} />
        )}
        { !leaderboard.amIn && <GraphBarVertical
            uid={props.uid}
            pos={-1}
            value={props.stats.streak}
            myUid={props.uid}
            height={leaderboard.myHeight}
            secondaryValue={(props.stats.streak < props.stats.maxStreak) && props.stats.maxStreak}
            secondaryHeight={(props.stats.streak < props.stats.maxStreak) && leaderboard.myMaxHeight} />
        }
      </div>
      { (props.stats.streak < props.stats.maxStreak) && <p className="small fade">Ті, хто наздоганяє свій минулий рекорд.</p> }
      { (leaderboard.myHeight > 100) && <p className="small fade">Маєте бути в топі, але чомусь не там? Схоже, з вашою статистикою щось може бути не так. <a href="https://www.facebook.com/kokokostya/">Напишіть нам</a>, і ми спробуємо розібратись.</p>}
      { leaderboard.amIn && <div className="small hint">🧠 В чому ваш секрет?</div> }

      <hr />
      
      <h3>Виграшні спроби</h3>

      <Metric value={props.averageStats.averageAttemptPercentile}>
        В середньому ви вгадували <b>з { averageAttempt }-ї спроби</b>
      </Metric>

      <br />

      <div className="rel">
        <div className="legend small">
          <span className="label my">Ви</span>
          <span className="label others">Інші</span>
        </div>
        {[...Array(6)].map((val, i) =>
          <GraphBarHorizontal
            key={i}
            num={i+1}
            myWidth={myGraphWidths[i+1]}
            averageWidth={avgGraphWidths[i+1]}
            comparing={true}
            winningAttempt={props.result == "won" ? props.attempt : null} />
        )}
      </div>

      { props.averageStatsLoaded && (
          props.stats.games <= 30 && props.stats.attempts[1]/props.stats.won >= .1
          || props.stats.games > 30 && props.stats.games <= 100 && props.stats.attempts[1]/props.stats.won >= .075
          || props.stats.games > 100 && props.stats.attempts[1]/props.stats.won >= .05
        )
        ? <div className="small hint">🧐 {props.stats.attempts[1]} з {props.stats.won} з першої спроби??? Ви часом не чітер?</div> 
        : props.averageStatsLoaded && (
          props.averageStats.gamesPercentile < .5 || 
          props.averageStats.wonPercentile < .5 || 
          props.averageStats.maxStreakPercentile < .5 || 
          props.averageStats.leaderboard[props.averageStats.leaderboard.length - 1] && 
          props.stats.maxStreak/props.averageStats.leaderboard[props.averageStats.leaderboard.length - 1].maxStreak < .1
        ) 
        ? <div className="small hint">😉 Місцями не дуже? Наздоженете! Вони теж з чогось починали.</div>
        : <hr />
      }

      <p className="small fade">В загальній статистиці не рахуються гравці із менш ніж 10 іграми, аномальними результатами, ті, хто не грав з минулого року, а також ті, хто вимкнув цю опцію <a href="#" onClick={() => props.switchModal("settings")}>в налаштуваннях</a>.</p>
    </React.Fragment>
  } else if (props.type == "settings") {
    title = "Налаштування";
    content = <React.Fragment>
      <div className="setting">
        <div className="control">
          <label htmlFor="setting-dark-theme">Темна тема</label>
          <input className="switch" type="checkbox" id="setting-dark-theme" checked={props.settings.darkTheme} onChange={() => 
            props.setSettings({
              darkTheme: !props.settings.darkTheme, 
              colorBlind: props.settings.colorBlind, 
              shareStats: props.settings.shareStats})
            } />
        </div>
      </div>

      <div className="setting">
        <div className="control">
          <label htmlFor="setting-color-blind">Режим для дальтоників</label>
          <input className="switch" type="checkbox" id="setting-color-blind" checked={props.settings.colorBlind} onChange={() => 
            props.setSettings({
              darkTheme: props.settings.darkTheme, 
              colorBlind: !props.settings.colorBlind, 
              shareStats: props.settings.shareStats})
            } />
        </div>
      </div>

      <div className="setting">
        <div className="control">
          <label htmlFor="setting-share-stats">Надсилати статистику</label>
          <input className="switch" type="checkbox" id="setting-share-stats" checked={props.settings.shareStats} onChange={() =>
            props.setSettings({
              darkTheme: props.settings.darkTheme, 
              colorBlind: props.settings.colorBlind, 
              shareStats: !props.settings.shareStats
            })
          } />
        </div>
        <p className="small fade">Вимкнувши цю опцію, ви не зможете бачити, як грали порівняно з іншими. Надсилаються лише ваші результати та унікальний ID: <i>{ props.uid }</i></p>
      </div>

    </React.Fragment>
  }

  return ReactDOM.createPortal(
    <div className="overlay">
      <div className={"body" + ((props.type == "avg-stats") ? " avg-stats rainbow" : "")}>
        <header>
          <h2>{ title }</h2>
          <button id="btn-close" className="icon ml-auto" aria-label="Повернутись до гри" onClick={(e) => props.handleClose(null)}>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" className="bi bi-x-lg" viewBox="0 0 16 16">
              <path fillRule="evenodd" d="M13.854 2.146a.5.5 0 0 1 0 .708l-11 11a.5.5 0 0 1-.708-.708l11-11a.5.5 0 0 1 .708 0Z"/>
              <path fillRule="evenodd" d="M2.146 2.146a.5.5 0 0 0 0 .708l11 11a.5.5 0 0 0 .708-.708l-11-11a.5.5 0 0 0-.708 0Z"/>
            </svg>
          </button>
        </header>
        <main>{ content }</main>
        { (props.type == "avg-stats") && <footer>
            <a className="" href="https://twitter.com/hashtag/%D1%83%D0%BA%D1%80Wordle">#укр<b>wordle</b></a>
          </footer> 
        }
      </div>
    </div>,
    document.querySelector("#modal"),
  );
}

function Congrat(props) {
  var string = ""
  switch(props.attempt) {
    case 1:
      string = "Чітер!";
      break;
    case 2:
      string = "Серйозно???";
      break;
    case 3:
      string = "Неймовірно!";
      break;
    case 4:
      string = "Так тримати!";
      break;
    case 5:
      string = "Непогано.";
      break;
    case 6:
      string = "Фух!";
  }
  return (
  <b>{string}</b>
  )
}

function Metric(props) {
  return (
    <div className="metric">
      <div className="trophy">{ pTrophy(props.value) }</div>
      <div className="standing">
        <div className="small">Краще за</div>
        { Math.round(props.value*1000)/10 }<small>%</small>
        <div className="small">гравців</div>
      </div>
      <div className="desc">{ props.children }</div>
    </div>
  )
}

function GraphBarHorizontal(props) {
  return (
    <div className="graph-horizontal">
      <div className="label">{ props.num }</div>
      <div className="bar-container">
        <div className={"bar" + ((!props.comparing && props.winningAttempt != props.num || props.comparing && props.myWidth == 0) ? " none" : "")} style={(props.comparing || props.myWidth > 5) ? {width: props.myWidth + "%"} : null}>
          { !props.comparing && props.attemptsCount }
        </div>
        { props.comparing && <div className="bar average" style={{width: props.averageWidth + "%"}}></div> }
      </div>
    </div>
  )
}

function GraphBarVertical(props) {
  return (
    <div className="graph-vertical">
      <div className="bar-container">
        <div className={"bar" + (props.uid == props.myUid ? (props.pos > 0 ? "" : " none") : " average")} style={{height: props.height + "%"}}>
          <span className="value">{ props.value }</span>
        </div>
        { props.secondaryValue && <div className={"bar secondary" + (props.uid == props.myUid ? (props.pos > 0 ? "" : " none") : " average")} style={{height: props.secondaryHeight + "%"}}>
            <span className="value">{ props.secondaryValue }</span>
          </div> 
        }
      </div>
      <div className="label">{ props.uid == props.myUid ? "Ви" : "#" + props.pos }</div>
    </div>
  )
}

function nTimes(n) {
  var lastDigit = n % 10;
  if ([11, 12, 13, 14].includes(n % 100)) lastDigit = 5;
  switch (lastDigit) {
    case 1:
      return "раз";
    case 2:
    case 3:
    case 4:
      return "рази";
    default:
      return "разів";
  }
}

function pTrophy(p) {
  if (p >= .99) {
    return "🤯"
  } else if (p >= .95) {
    return "🤌"
  } else if (p >= .9) {
    return "😲"
  } else if (p >= .8) {
    return "🌟"
  } else if (p >= .7) {
    return "💪"
  } else if (p >= .6) {
    return "👍"
  } else if (p >= .5) {
    return "👌"
  } else {
    return "💩"
  }
}

const letters = document.getElementById("app").dataset.letters;

ReactDOM.render(<App letters={letters} />, document.getElementById("app"));